[tool.poetry]
name = "my-python-app"
version = "0.1.0"
description = "A sample Python API backend"
authors = ["Meng Wang Koh <meng_wang_koh@cargill.com>"]
license = "MIT"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"
fastapi = "^0.110.2"
httpx = "^0.27.0"
python-dotenv = "^1.0.1"
pre-commit = "^3.7.0"
uvicorn = "^0.29.0"
sqlmodel = "^0.0.18"
psycopg = { version = "^3.1.18", extras = ["binary"] }
pydantic = "^2.7.1"
pydantic-settings = "^2.2.1"
tenacity = "^8.3.0"
alembic = "^1.13.1"
passlib = {version = "^1.7.4", extras = ["bcrypt"]}
pyjwt = "^2.8.0"
python-multipart = "^0.0.9"
websockets = "^12.0"
fastapi-azure-auth = "^4.4.0"


[tool.poetry.group.dev.dependencies]
pytest = "^8.2.0"
coverage = "^7.5.1"
pre-commit = "^3.7.0"
mypy = "^1.10.0"
ruff = "^0.4.4"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
strict = true
exclude = ["venv", ".venv", "alembic"]

[tool.ruff]
target-version = "py310"
exclude = ["alembic"]

[tool.ruff.lint]
select = [
  "E",      # pycodestyle errors
  "W",      # pycodestyle warnings
  "F",      # pyflakes
  "I",      # isort
  "B",      # flake8-bugbear
  "C4",     # flake8-comprehensions
  "UP",     # pyupgrade
  "ARG001", # unused arguments in functions
]
ignore = [
  "E501", # line too long, handled by black
  "B008", # do not perform function calls in argument defaults
  "W191", # indentation contains tabs
  "B904", # Allow raising exceptions without from e, for HTTPException
]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true
